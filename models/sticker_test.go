// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testStickers(t *testing.T) {
	t.Parallel()

	query := Stickers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testStickersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sticker{}
	if err = randomize.Struct(seed, o, stickerDBTypes, true, stickerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sticker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Stickers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStickersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sticker{}
	if err = randomize.Struct(seed, o, stickerDBTypes, true, stickerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sticker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Stickers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Stickers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStickersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sticker{}
	if err = randomize.Struct(seed, o, stickerDBTypes, true, stickerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sticker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StickerSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Stickers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStickersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sticker{}
	if err = randomize.Struct(seed, o, stickerDBTypes, true, stickerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sticker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := StickerExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Sticker exists: %s", err)
	}
	if !e {
		t.Errorf("Expected StickerExists to return true, but got false.")
	}
}

func testStickersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sticker{}
	if err = randomize.Struct(seed, o, stickerDBTypes, true, stickerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sticker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	stickerFound, err := FindSticker(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if stickerFound == nil {
		t.Error("want a record, got nil")
	}
}

func testStickersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sticker{}
	if err = randomize.Struct(seed, o, stickerDBTypes, true, stickerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sticker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Stickers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testStickersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sticker{}
	if err = randomize.Struct(seed, o, stickerDBTypes, true, stickerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sticker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Stickers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testStickersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	stickerOne := &Sticker{}
	stickerTwo := &Sticker{}
	if err = randomize.Struct(seed, stickerOne, stickerDBTypes, false, stickerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sticker struct: %s", err)
	}
	if err = randomize.Struct(seed, stickerTwo, stickerDBTypes, false, stickerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sticker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = stickerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = stickerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Stickers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testStickersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	stickerOne := &Sticker{}
	stickerTwo := &Sticker{}
	if err = randomize.Struct(seed, stickerOne, stickerDBTypes, false, stickerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sticker struct: %s", err)
	}
	if err = randomize.Struct(seed, stickerTwo, stickerDBTypes, false, stickerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sticker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = stickerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = stickerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Stickers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testStickersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sticker{}
	if err = randomize.Struct(seed, o, stickerDBTypes, true, stickerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sticker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Stickers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStickersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sticker{}
	if err = randomize.Struct(seed, o, stickerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Sticker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(stickerColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Stickers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStickerToManyStickerKeywords(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Sticker
	var b, c StickerKeyword

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, stickerDBTypes, true, stickerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sticker struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, stickerKeywordDBTypes, false, stickerKeywordColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, stickerKeywordDBTypes, false, stickerKeywordColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.StickerID = a.ID
	c.StickerID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.StickerKeywords().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.StickerID == b.StickerID {
			bFound = true
		}
		if v.StickerID == c.StickerID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := StickerSlice{&a}
	if err = a.L.LoadStickerKeywords(ctx, tx, false, (*[]*Sticker)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.StickerKeywords); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.StickerKeywords = nil
	if err = a.L.LoadStickerKeywords(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.StickerKeywords); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testStickerToManyAddOpStickerKeywords(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Sticker
	var b, c, d, e StickerKeyword

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, stickerDBTypes, false, strmangle.SetComplement(stickerPrimaryKeyColumns, stickerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*StickerKeyword{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, stickerKeywordDBTypes, false, strmangle.SetComplement(stickerKeywordPrimaryKeyColumns, stickerKeywordColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*StickerKeyword{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddStickerKeywords(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.StickerID {
			t.Error("foreign key was wrong value", a.ID, first.StickerID)
		}
		if a.ID != second.StickerID {
			t.Error("foreign key was wrong value", a.ID, second.StickerID)
		}

		if first.R.Sticker != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Sticker != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.StickerKeywords[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.StickerKeywords[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.StickerKeywords().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testStickersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sticker{}
	if err = randomize.Struct(seed, o, stickerDBTypes, true, stickerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sticker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStickersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sticker{}
	if err = randomize.Struct(seed, o, stickerDBTypes, true, stickerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sticker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StickerSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStickersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sticker{}
	if err = randomize.Struct(seed, o, stickerDBTypes, true, stickerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sticker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Stickers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	stickerDBTypes = map[string]string{`ID`: `INTEGER`, `FileID`: `TEXT`, `StickerType`: `TEXT`, `CreatedAt`: `DATETIME`, `UpdatedAt`: `DATETIME`}
	_              = bytes.MinRead
)

func testStickersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(stickerPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(stickerAllColumns) == len(stickerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Sticker{}
	if err = randomize.Struct(seed, o, stickerDBTypes, true, stickerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sticker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Stickers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, stickerDBTypes, true, stickerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Sticker struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testStickersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(stickerAllColumns) == len(stickerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Sticker{}
	if err = randomize.Struct(seed, o, stickerDBTypes, true, stickerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sticker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Stickers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, stickerDBTypes, true, stickerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Sticker struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(stickerAllColumns, stickerPrimaryKeyColumns) {
		fields = stickerAllColumns
	} else {
		fields = strmangle.SetComplement(
			stickerAllColumns,
			stickerPrimaryKeyColumns,
		)
		fields = strmangle.SetComplement(fields, stickerGeneratedColumns)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := StickerSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testStickersUpsert(t *testing.T) {
	t.Parallel()
	if len(stickerAllColumns) == len(stickerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Sticker{}
	if err = randomize.Struct(seed, &o, stickerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Sticker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Sticker: %s", err)
	}

	count, err := Stickers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, stickerDBTypes, false, stickerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Sticker struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Sticker: %s", err)
	}

	count, err = Stickers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
