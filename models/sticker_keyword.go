// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// StickerKeyword is an object representing the database table.
type StickerKeyword struct {
	StickerID int64     `boil:"sticker_id" json:"sticker_id" toml:"sticker_id" yaml:"sticker_id"`
	KeywordID int64     `boil:"keyword_id" json:"keyword_id" toml:"keyword_id" yaml:"keyword_id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *stickerKeywordR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L stickerKeywordL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StickerKeywordColumns = struct {
	StickerID string
	KeywordID string
	CreatedAt string
	UpdatedAt string
}{
	StickerID: "sticker_id",
	KeywordID: "keyword_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var StickerKeywordTableColumns = struct {
	StickerID string
	KeywordID string
	CreatedAt string
	UpdatedAt string
}{
	StickerID: "sticker_keyword.sticker_id",
	KeywordID: "sticker_keyword.keyword_id",
	CreatedAt: "sticker_keyword.created_at",
	UpdatedAt: "sticker_keyword.updated_at",
}

// Generated where

var StickerKeywordWhere = struct {
	StickerID whereHelperint64
	KeywordID whereHelperint64
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	StickerID: whereHelperint64{field: "\"sticker_keyword\".\"sticker_id\""},
	KeywordID: whereHelperint64{field: "\"sticker_keyword\".\"keyword_id\""},
	CreatedAt: whereHelpertime_Time{field: "\"sticker_keyword\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"sticker_keyword\".\"updated_at\""},
}

// StickerKeywordRels is where relationship names are stored.
var StickerKeywordRels = struct {
	Keyword string
	Sticker string
}{
	Keyword: "Keyword",
	Sticker: "Sticker",
}

// stickerKeywordR is where relationships are stored.
type stickerKeywordR struct {
	Keyword *Keyword `boil:"Keyword" json:"Keyword" toml:"Keyword" yaml:"Keyword"`
	Sticker *Sticker `boil:"Sticker" json:"Sticker" toml:"Sticker" yaml:"Sticker"`
}

// NewStruct creates a new relationship struct
func (*stickerKeywordR) NewStruct() *stickerKeywordR {
	return &stickerKeywordR{}
}

func (r *stickerKeywordR) GetKeyword() *Keyword {
	if r == nil {
		return nil
	}
	return r.Keyword
}

func (r *stickerKeywordR) GetSticker() *Sticker {
	if r == nil {
		return nil
	}
	return r.Sticker
}

// stickerKeywordL is where Load methods for each relationship are stored.
type stickerKeywordL struct{}

var (
	stickerKeywordAllColumns            = []string{"sticker_id", "keyword_id", "created_at", "updated_at"}
	stickerKeywordColumnsWithoutDefault = []string{"sticker_id", "keyword_id", "created_at", "updated_at"}
	stickerKeywordColumnsWithDefault    = []string{}
	stickerKeywordPrimaryKeyColumns     = []string{"sticker_id", "keyword_id"}
	stickerKeywordGeneratedColumns      = []string{}
)

type (
	// StickerKeywordSlice is an alias for a slice of pointers to StickerKeyword.
	// This should almost always be used instead of []StickerKeyword.
	StickerKeywordSlice []*StickerKeyword

	stickerKeywordQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	stickerKeywordType                 = reflect.TypeOf(&StickerKeyword{})
	stickerKeywordMapping              = queries.MakeStructMapping(stickerKeywordType)
	stickerKeywordPrimaryKeyMapping, _ = queries.BindMapping(stickerKeywordType, stickerKeywordMapping, stickerKeywordPrimaryKeyColumns)
	stickerKeywordInsertCacheMut       sync.RWMutex
	stickerKeywordInsertCache          = make(map[string]insertCache)
	stickerKeywordUpdateCacheMut       sync.RWMutex
	stickerKeywordUpdateCache          = make(map[string]updateCache)
	stickerKeywordUpsertCacheMut       sync.RWMutex
	stickerKeywordUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single stickerKeyword record from the query.
func (q stickerKeywordQuery) One(ctx context.Context, exec boil.ContextExecutor) (*StickerKeyword, error) {
	o := &StickerKeyword{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sticker_keyword")
	}

	return o, nil
}

// All returns all StickerKeyword records from the query.
func (q stickerKeywordQuery) All(ctx context.Context, exec boil.ContextExecutor) (StickerKeywordSlice, error) {
	var o []*StickerKeyword

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to StickerKeyword slice")
	}

	return o, nil
}

// Count returns the count of all StickerKeyword records in the query.
func (q stickerKeywordQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sticker_keyword rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q stickerKeywordQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sticker_keyword exists")
	}

	return count > 0, nil
}

// Keyword pointed to by the foreign key.
func (o *StickerKeyword) Keyword(mods ...qm.QueryMod) keywordQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.KeywordID),
	}

	queryMods = append(queryMods, mods...)

	return Keywords(queryMods...)
}

// Sticker pointed to by the foreign key.
func (o *StickerKeyword) Sticker(mods ...qm.QueryMod) stickerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.StickerID),
	}

	queryMods = append(queryMods, mods...)

	return Stickers(queryMods...)
}

// LoadKeyword allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (stickerKeywordL) LoadKeyword(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStickerKeyword interface{}, mods queries.Applicator) error {
	var slice []*StickerKeyword
	var object *StickerKeyword

	if singular {
		var ok bool
		object, ok = maybeStickerKeyword.(*StickerKeyword)
		if !ok {
			object = new(StickerKeyword)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStickerKeyword)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStickerKeyword))
			}
		}
	} else {
		s, ok := maybeStickerKeyword.(*[]*StickerKeyword)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStickerKeyword)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStickerKeyword))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &stickerKeywordR{}
		}
		args = append(args, object.KeywordID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stickerKeywordR{}
			}

			for _, a := range args {
				if a == obj.KeywordID {
					continue Outer
				}
			}

			args = append(args, obj.KeywordID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`keyword`),
		qm.WhereIn(`keyword.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Keyword")
	}

	var resultSlice []*Keyword
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Keyword")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for keyword")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for keyword")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Keyword = foreign
		if foreign.R == nil {
			foreign.R = &keywordR{}
		}
		foreign.R.StickerKeywords = append(foreign.R.StickerKeywords, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.KeywordID == foreign.ID {
				local.R.Keyword = foreign
				if foreign.R == nil {
					foreign.R = &keywordR{}
				}
				foreign.R.StickerKeywords = append(foreign.R.StickerKeywords, local)
				break
			}
		}
	}

	return nil
}

// LoadSticker allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (stickerKeywordL) LoadSticker(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStickerKeyword interface{}, mods queries.Applicator) error {
	var slice []*StickerKeyword
	var object *StickerKeyword

	if singular {
		var ok bool
		object, ok = maybeStickerKeyword.(*StickerKeyword)
		if !ok {
			object = new(StickerKeyword)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStickerKeyword)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStickerKeyword))
			}
		}
	} else {
		s, ok := maybeStickerKeyword.(*[]*StickerKeyword)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStickerKeyword)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStickerKeyword))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &stickerKeywordR{}
		}
		args = append(args, object.StickerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stickerKeywordR{}
			}

			for _, a := range args {
				if a == obj.StickerID {
					continue Outer
				}
			}

			args = append(args, obj.StickerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sticker`),
		qm.WhereIn(`sticker.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Sticker")
	}

	var resultSlice []*Sticker
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Sticker")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sticker")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sticker")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Sticker = foreign
		if foreign.R == nil {
			foreign.R = &stickerR{}
		}
		foreign.R.StickerKeywords = append(foreign.R.StickerKeywords, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StickerID == foreign.ID {
				local.R.Sticker = foreign
				if foreign.R == nil {
					foreign.R = &stickerR{}
				}
				foreign.R.StickerKeywords = append(foreign.R.StickerKeywords, local)
				break
			}
		}
	}

	return nil
}

// SetKeyword of the stickerKeyword to the related item.
// Sets o.R.Keyword to related.
// Adds o to related.R.StickerKeywords.
func (o *StickerKeyword) SetKeyword(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Keyword) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"sticker_keyword\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"keyword_id"}),
		strmangle.WhereClause("\"", "\"", 0, stickerKeywordPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.StickerID, o.KeywordID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.KeywordID = related.ID
	if o.R == nil {
		o.R = &stickerKeywordR{
			Keyword: related,
		}
	} else {
		o.R.Keyword = related
	}

	if related.R == nil {
		related.R = &keywordR{
			StickerKeywords: StickerKeywordSlice{o},
		}
	} else {
		related.R.StickerKeywords = append(related.R.StickerKeywords, o)
	}

	return nil
}

// SetSticker of the stickerKeyword to the related item.
// Sets o.R.Sticker to related.
// Adds o to related.R.StickerKeywords.
func (o *StickerKeyword) SetSticker(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Sticker) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"sticker_keyword\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"sticker_id"}),
		strmangle.WhereClause("\"", "\"", 0, stickerKeywordPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.StickerID, o.KeywordID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StickerID = related.ID
	if o.R == nil {
		o.R = &stickerKeywordR{
			Sticker: related,
		}
	} else {
		o.R.Sticker = related
	}

	if related.R == nil {
		related.R = &stickerR{
			StickerKeywords: StickerKeywordSlice{o},
		}
	} else {
		related.R.StickerKeywords = append(related.R.StickerKeywords, o)
	}

	return nil
}

// StickerKeywords retrieves all the records using an executor.
func StickerKeywords(mods ...qm.QueryMod) stickerKeywordQuery {
	mods = append(mods, qm.From("\"sticker_keyword\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"sticker_keyword\".*"})
	}

	return stickerKeywordQuery{q}
}

// FindStickerKeyword retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStickerKeyword(ctx context.Context, exec boil.ContextExecutor, stickerID int64, keywordID int64, selectCols ...string) (*StickerKeyword, error) {
	stickerKeywordObj := &StickerKeyword{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"sticker_keyword\" where \"sticker_id\"=? AND \"keyword_id\"=?", sel,
	)

	q := queries.Raw(query, stickerID, keywordID)

	err := q.Bind(ctx, exec, stickerKeywordObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sticker_keyword")
	}

	return stickerKeywordObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *StickerKeyword) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sticker_keyword provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(stickerKeywordColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	stickerKeywordInsertCacheMut.RLock()
	cache, cached := stickerKeywordInsertCache[key]
	stickerKeywordInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			stickerKeywordAllColumns,
			stickerKeywordColumnsWithDefault,
			stickerKeywordColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(stickerKeywordType, stickerKeywordMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(stickerKeywordType, stickerKeywordMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"sticker_keyword\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"sticker_keyword\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sticker_keyword")
	}

	if !cached {
		stickerKeywordInsertCacheMut.Lock()
		stickerKeywordInsertCache[key] = cache
		stickerKeywordInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the StickerKeyword.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *StickerKeyword) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	stickerKeywordUpdateCacheMut.RLock()
	cache, cached := stickerKeywordUpdateCache[key]
	stickerKeywordUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			stickerKeywordAllColumns,
			stickerKeywordPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sticker_keyword, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"sticker_keyword\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, stickerKeywordPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(stickerKeywordType, stickerKeywordMapping, append(wl, stickerKeywordPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sticker_keyword row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sticker_keyword")
	}

	if !cached {
		stickerKeywordUpdateCacheMut.Lock()
		stickerKeywordUpdateCache[key] = cache
		stickerKeywordUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q stickerKeywordQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sticker_keyword")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sticker_keyword")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StickerKeywordSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stickerKeywordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"sticker_keyword\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, stickerKeywordPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in stickerKeyword slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all stickerKeyword")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *StickerKeyword) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sticker_keyword provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(stickerKeywordColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	stickerKeywordUpsertCacheMut.RLock()
	cache, cached := stickerKeywordUpsertCache[key]
	stickerKeywordUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			stickerKeywordAllColumns,
			stickerKeywordColumnsWithDefault,
			stickerKeywordColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			stickerKeywordAllColumns,
			stickerKeywordPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert sticker_keyword, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(stickerKeywordPrimaryKeyColumns))
			copy(conflict, stickerKeywordPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"sticker_keyword\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(stickerKeywordType, stickerKeywordMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(stickerKeywordType, stickerKeywordMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert sticker_keyword")
	}

	if !cached {
		stickerKeywordUpsertCacheMut.Lock()
		stickerKeywordUpsertCache[key] = cache
		stickerKeywordUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single StickerKeyword record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *StickerKeyword) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no StickerKeyword provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), stickerKeywordPrimaryKeyMapping)
	sql := "DELETE FROM \"sticker_keyword\" WHERE \"sticker_id\"=? AND \"keyword_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sticker_keyword")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sticker_keyword")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q stickerKeywordQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no stickerKeywordQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sticker_keyword")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sticker_keyword")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StickerKeywordSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stickerKeywordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"sticker_keyword\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, stickerKeywordPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from stickerKeyword slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sticker_keyword")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *StickerKeyword) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStickerKeyword(ctx, exec, o.StickerID, o.KeywordID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StickerKeywordSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StickerKeywordSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stickerKeywordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"sticker_keyword\".* FROM \"sticker_keyword\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, stickerKeywordPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in StickerKeywordSlice")
	}

	*o = slice

	return nil
}

// StickerKeywordExists checks if the StickerKeyword row exists.
func StickerKeywordExists(ctx context.Context, exec boil.ContextExecutor, stickerID int64, keywordID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"sticker_keyword\" where \"sticker_id\"=? AND \"keyword_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, stickerID, keywordID)
	}
	row := exec.QueryRowContext(ctx, sql, stickerID, keywordID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sticker_keyword exists")
	}

	return exists, nil
}

// Exists checks if the StickerKeyword row exists.
func (o *StickerKeyword) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return StickerKeywordExists(ctx, exec, o.StickerID, o.KeywordID)
}
