// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testStickerKeywords(t *testing.T) {
	t.Parallel()

	query := StickerKeywords()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testStickerKeywordsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StickerKeyword{}
	if err = randomize.Struct(seed, o, stickerKeywordDBTypes, true, stickerKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StickerKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StickerKeywords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStickerKeywordsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StickerKeyword{}
	if err = randomize.Struct(seed, o, stickerKeywordDBTypes, true, stickerKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StickerKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := StickerKeywords().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StickerKeywords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStickerKeywordsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StickerKeyword{}
	if err = randomize.Struct(seed, o, stickerKeywordDBTypes, true, stickerKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StickerKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StickerKeywordSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StickerKeywords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStickerKeywordsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StickerKeyword{}
	if err = randomize.Struct(seed, o, stickerKeywordDBTypes, true, stickerKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StickerKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := StickerKeywordExists(ctx, tx, o.StickerID, o.KeywordID)
	if err != nil {
		t.Errorf("Unable to check if StickerKeyword exists: %s", err)
	}
	if !e {
		t.Errorf("Expected StickerKeywordExists to return true, but got false.")
	}
}

func testStickerKeywordsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StickerKeyword{}
	if err = randomize.Struct(seed, o, stickerKeywordDBTypes, true, stickerKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StickerKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	stickerKeywordFound, err := FindStickerKeyword(ctx, tx, o.StickerID, o.KeywordID)
	if err != nil {
		t.Error(err)
	}

	if stickerKeywordFound == nil {
		t.Error("want a record, got nil")
	}
}

func testStickerKeywordsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StickerKeyword{}
	if err = randomize.Struct(seed, o, stickerKeywordDBTypes, true, stickerKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StickerKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = StickerKeywords().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testStickerKeywordsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StickerKeyword{}
	if err = randomize.Struct(seed, o, stickerKeywordDBTypes, true, stickerKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StickerKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := StickerKeywords().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testStickerKeywordsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	stickerKeywordOne := &StickerKeyword{}
	stickerKeywordTwo := &StickerKeyword{}
	if err = randomize.Struct(seed, stickerKeywordOne, stickerKeywordDBTypes, false, stickerKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StickerKeyword struct: %s", err)
	}
	if err = randomize.Struct(seed, stickerKeywordTwo, stickerKeywordDBTypes, false, stickerKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StickerKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = stickerKeywordOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = stickerKeywordTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := StickerKeywords().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testStickerKeywordsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	stickerKeywordOne := &StickerKeyword{}
	stickerKeywordTwo := &StickerKeyword{}
	if err = randomize.Struct(seed, stickerKeywordOne, stickerKeywordDBTypes, false, stickerKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StickerKeyword struct: %s", err)
	}
	if err = randomize.Struct(seed, stickerKeywordTwo, stickerKeywordDBTypes, false, stickerKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StickerKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = stickerKeywordOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = stickerKeywordTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StickerKeywords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testStickerKeywordsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StickerKeyword{}
	if err = randomize.Struct(seed, o, stickerKeywordDBTypes, true, stickerKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StickerKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StickerKeywords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStickerKeywordsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StickerKeyword{}
	if err = randomize.Struct(seed, o, stickerKeywordDBTypes, true); err != nil {
		t.Errorf("Unable to randomize StickerKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(stickerKeywordColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := StickerKeywords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStickerKeywordToOneKeywordUsingKeyword(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local StickerKeyword
	var foreign Keyword

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, stickerKeywordDBTypes, false, stickerKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StickerKeyword struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, keywordDBTypes, false, keywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Keyword struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.KeywordID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Keyword().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := StickerKeywordSlice{&local}
	if err = local.L.LoadKeyword(ctx, tx, false, (*[]*StickerKeyword)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Keyword == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Keyword = nil
	if err = local.L.LoadKeyword(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Keyword == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testStickerKeywordToOneStickerUsingSticker(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local StickerKeyword
	var foreign Sticker

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, stickerKeywordDBTypes, false, stickerKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StickerKeyword struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, stickerDBTypes, false, stickerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sticker struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.StickerID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Sticker().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := StickerKeywordSlice{&local}
	if err = local.L.LoadSticker(ctx, tx, false, (*[]*StickerKeyword)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Sticker == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Sticker = nil
	if err = local.L.LoadSticker(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Sticker == nil {
		t.Error("struct should have been eager loaded")
	}

}

func testStickerKeywordToOneSetOpKeywordUsingKeyword(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a StickerKeyword
	var b, c Keyword

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, stickerKeywordDBTypes, false, strmangle.SetComplement(stickerKeywordPrimaryKeyColumns, stickerKeywordColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, keywordDBTypes, false, strmangle.SetComplement(keywordPrimaryKeyColumns, keywordColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, keywordDBTypes, false, strmangle.SetComplement(keywordPrimaryKeyColumns, keywordColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Keyword{&b, &c} {
		err = a.SetKeyword(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Keyword != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.StickerKeywords[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.KeywordID != x.ID {
			t.Error("foreign key was wrong value", a.KeywordID)
		}

		if exists, err := StickerKeywordExists(ctx, tx, a.StickerID, a.KeywordID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testStickerKeywordToOneSetOpStickerUsingSticker(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a StickerKeyword
	var b, c Sticker

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, stickerKeywordDBTypes, false, strmangle.SetComplement(stickerKeywordPrimaryKeyColumns, stickerKeywordColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, stickerDBTypes, false, strmangle.SetComplement(stickerPrimaryKeyColumns, stickerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, stickerDBTypes, false, strmangle.SetComplement(stickerPrimaryKeyColumns, stickerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Sticker{&b, &c} {
		err = a.SetSticker(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Sticker != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.StickerKeywords[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.StickerID != x.ID {
			t.Error("foreign key was wrong value", a.StickerID)
		}

		if exists, err := StickerKeywordExists(ctx, tx, a.StickerID, a.KeywordID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testStickerKeywordsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StickerKeyword{}
	if err = randomize.Struct(seed, o, stickerKeywordDBTypes, true, stickerKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StickerKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStickerKeywordsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StickerKeyword{}
	if err = randomize.Struct(seed, o, stickerKeywordDBTypes, true, stickerKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StickerKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StickerKeywordSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStickerKeywordsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StickerKeyword{}
	if err = randomize.Struct(seed, o, stickerKeywordDBTypes, true, stickerKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StickerKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := StickerKeywords().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	stickerKeywordDBTypes = map[string]string{`StickerID`: `INTEGER`, `KeywordID`: `INTEGER`, `CreatedAt`: `DATETIME`, `UpdatedAt`: `DATETIME`}
	_                     = bytes.MinRead
)

func testStickerKeywordsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(stickerKeywordPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(stickerKeywordAllColumns) == len(stickerKeywordPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &StickerKeyword{}
	if err = randomize.Struct(seed, o, stickerKeywordDBTypes, true, stickerKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StickerKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StickerKeywords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, stickerKeywordDBTypes, true, stickerKeywordPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StickerKeyword struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testStickerKeywordsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(stickerKeywordAllColumns) == len(stickerKeywordPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &StickerKeyword{}
	if err = randomize.Struct(seed, o, stickerKeywordDBTypes, true, stickerKeywordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StickerKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StickerKeywords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, stickerKeywordDBTypes, true, stickerKeywordPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StickerKeyword struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(stickerKeywordAllColumns, stickerKeywordPrimaryKeyColumns) {
		fields = stickerKeywordAllColumns
	} else {
		fields = strmangle.SetComplement(
			stickerKeywordAllColumns,
			stickerKeywordPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := StickerKeywordSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testStickerKeywordsUpsert(t *testing.T) {
	t.Parallel()
	if len(stickerKeywordAllColumns) == len(stickerKeywordPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := StickerKeyword{}
	if err = randomize.Struct(seed, &o, stickerKeywordDBTypes, true); err != nil {
		t.Errorf("Unable to randomize StickerKeyword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert StickerKeyword: %s", err)
	}

	count, err := StickerKeywords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, stickerKeywordDBTypes, false, stickerKeywordPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StickerKeyword struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert StickerKeyword: %s", err)
	}

	count, err = StickerKeywords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
