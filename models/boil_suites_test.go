// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Keywords", testKeywords)
	t.Run("Stickers", testStickers)
	t.Run("StickerKeywords", testStickerKeywords)
}

func TestDelete(t *testing.T) {
	t.Run("Keywords", testKeywordsDelete)
	t.Run("Stickers", testStickersDelete)
	t.Run("StickerKeywords", testStickerKeywordsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Keywords", testKeywordsQueryDeleteAll)
	t.Run("Stickers", testStickersQueryDeleteAll)
	t.Run("StickerKeywords", testStickerKeywordsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Keywords", testKeywordsSliceDeleteAll)
	t.Run("Stickers", testStickersSliceDeleteAll)
	t.Run("StickerKeywords", testStickerKeywordsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Keywords", testKeywordsExists)
	t.Run("Stickers", testStickersExists)
	t.Run("StickerKeywords", testStickerKeywordsExists)
}

func TestFind(t *testing.T) {
	t.Run("Keywords", testKeywordsFind)
	t.Run("Stickers", testStickersFind)
	t.Run("StickerKeywords", testStickerKeywordsFind)
}

func TestBind(t *testing.T) {
	t.Run("Keywords", testKeywordsBind)
	t.Run("Stickers", testStickersBind)
	t.Run("StickerKeywords", testStickerKeywordsBind)
}

func TestOne(t *testing.T) {
	t.Run("Keywords", testKeywordsOne)
	t.Run("Stickers", testStickersOne)
	t.Run("StickerKeywords", testStickerKeywordsOne)
}

func TestAll(t *testing.T) {
	t.Run("Keywords", testKeywordsAll)
	t.Run("Stickers", testStickersAll)
	t.Run("StickerKeywords", testStickerKeywordsAll)
}

func TestCount(t *testing.T) {
	t.Run("Keywords", testKeywordsCount)
	t.Run("Stickers", testStickersCount)
	t.Run("StickerKeywords", testStickerKeywordsCount)
}

func TestInsert(t *testing.T) {
	t.Run("Keywords", testKeywordsInsert)
	t.Run("Keywords", testKeywordsInsertWhitelist)
	t.Run("Stickers", testStickersInsert)
	t.Run("Stickers", testStickersInsertWhitelist)
	t.Run("StickerKeywords", testStickerKeywordsInsert)
	t.Run("StickerKeywords", testStickerKeywordsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("StickerKeywordToKeywordUsingKeyword", testStickerKeywordToOneKeywordUsingKeyword)
	t.Run("StickerKeywordToStickerUsingSticker", testStickerKeywordToOneStickerUsingSticker)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("KeywordToStickerKeywords", testKeywordToManyStickerKeywords)
	t.Run("StickerToStickerKeywords", testStickerToManyStickerKeywords)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("StickerKeywordToKeywordUsingStickerKeywords", testStickerKeywordToOneSetOpKeywordUsingKeyword)
	t.Run("StickerKeywordToStickerUsingStickerKeywords", testStickerKeywordToOneSetOpStickerUsingSticker)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("KeywordToStickerKeywords", testKeywordToManyAddOpStickerKeywords)
	t.Run("StickerToStickerKeywords", testStickerToManyAddOpStickerKeywords)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Keywords", testKeywordsReload)
	t.Run("Stickers", testStickersReload)
	t.Run("StickerKeywords", testStickerKeywordsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Keywords", testKeywordsReloadAll)
	t.Run("Stickers", testStickersReloadAll)
	t.Run("StickerKeywords", testStickerKeywordsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Keywords", testKeywordsSelect)
	t.Run("Stickers", testStickersSelect)
	t.Run("StickerKeywords", testStickerKeywordsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Keywords", testKeywordsUpdate)
	t.Run("Stickers", testStickersUpdate)
	t.Run("StickerKeywords", testStickerKeywordsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Keywords", testKeywordsSliceUpdateAll)
	t.Run("Stickers", testStickersSliceUpdateAll)
	t.Run("StickerKeywords", testStickerKeywordsSliceUpdateAll)
}
